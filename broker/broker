broker入口
1、org.apache.rocketmq.broker.BrokerController.initialize
2、定时将内存中的数据，持久化到文件中

------------------------------------------------------------------
broker处理消息拉取请求入口
1、org.apache.rocketmq.broker.longpolling.PullRequestHoldService.run
2、每次拉取消息之后，会根据当前拉取的消息返回下一次消息拉取的偏移量
3、broker消息偏移量不对会校正：org.apache.rocketmq.store.DefaultMessageStore.getMessage

------------------------------------------------------------------
定时消息入口：
1、org.apache.rocketmq.store.schedule.ScheduleMessageService
2、org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask.executeOnTimeup【核心方法】

------------------------------------------------------------------
类过滤
1、订阅消息与FilterServer注册流程

消息消费者 先用类过滤模式将过滤器类，过滤器类内容 添加到订阅消息中（RebalanceImpl)。
消费者拉取消息时，向FilterServer发送请求，那FilterServer怎么得到FilterServer服务器地址呢？通过主题路由信息，向NameServer获取。消费者在得到FilterServervf服务地址的时候，会将自己过滤器类代码发送到FilterServer,方便FilterServer在拉取消息时执行过滤逻辑。
FilterServer启动时向Broker注册Filter服务地址信息。（服务列表），然后Broker将该信息通过心跳向NameServer注册，将FilterServer服务列表保存在主题的路由信息中。
2、clientUploadFilterClassEnable 参数，如果设置为false, 则需要一个url，去下载过滤类：url/classname.java 这样的请求，FilterServer要能拿到过滤类代码。

3、类过滤模式，上传的类必须实现MessageFilter接口。


------------------------------------------------------------------
定时消息
1、使用tagCode 过滤，tagcode为消息的发送时间
2、没有消息，计算下一次要开始的时间，有消息间隔100ms
3、队列Id跟level，队列Id=delayLevel - 1

------------------------------------------------------------------
读写分离
1、只有master繁忙，才会从指定的从服务器读取消息，需计算未拉取的是否大于设定的
2、每次拉取数据，会返回下一次拉取的brokerId
3、消息拉取进度回写到服务器，还是请求到主服务器

